* xx
正则表达式本身，加上如同一门袖珍编程语言的模式表示法，赋予使用者描述和分析文本的能力。配合特定工具提供的额外支持，正则表达式能够添加、删除、分离、叠加、插入和修正各种类型的文本和数据

例：
需要检查许多文件每一行中“SetSize”出现的次数和“ResetSize”的次数一样多，考虑大小写的情况
$ perl -0ne 'print "$AEGV\n" if s/ResetSize//ig != s/SetSize//ig'

帮助朋友处理远端及其上的某些E-mail，他希望我把他的邮箱文件中的消息作为列表发送给他，这个需要删除邮件头，邮件尾的一些内容。 解决方案：sed和正则

正则表达式的历史
** 工作原理
构建正则表达式的方式决定了某个正则表达式能否匹配一个特定字符串，在何处匹配，以及匹配成功或者报告失败的速度

测试工作引擎：
nfa|nfa not ：只有nfa匹配，就是传统nfa
DFA不支持捕获型括号和回溯


** 结构
^ $ ：匹配位置
元字符序列：\< \>  文本界限

[]：字符组  [1-6] "-"表示一个范围
[^]：排除型字符

元字符： 
    . 匹配任意字符
    ？可选项 允许出现这个字符，但它的出现并非匹配成功的标志
    * 任意次数，包括0次
    + 至少出现一次
    {3，5} 区间
    \ 消除元字符的特殊意义
    

多选结构： |   ()

()用途： 限制多选项的范围；将若干字符组成一个单元

一个字符组只能匹配目标文件中的单个字符，每个多选结构自身都可能是完整的正则表达式
字符组基本可以算作一门独立的微型语言，多选结构是“正则表达式语言主体”的一部分
对检索文本的了解，以及需要达到的准确程度，两者之间取得平衡

小技巧：
忽略大小写



正则表达式本身，加上如同一门袖珍编程语言的模式表示法，赋予使用者描述和分析文本的能力。配合特定工具提供的额外支持，正则表达式能够添加、删除、分离、叠加、插入和修正各种类型的文本和数据

例：
需要检查许多文件每一行中“SetSize”出现的次数和“ResetSize”的次数一样多，考虑大小写的情况
$ perl -0ne 'print "$AEGV\n" if s/ResetSize//ig != s/SetSize//ig'

帮助朋友处理远端及其上的某些E-mail，他希望我把他的邮箱文件中的消息作为列表发送给他，这个需要删除邮件头，邮件尾的一些内容。 解决方案：sed和正则

正则表达式的历史
** 工作原理
构建正则表达式的方式决定了某个正则表达式能否匹配一个特定字符串，在何处匹配，以及匹配成功或者报告失败的速度

测试工作引擎：
nfa|nfa not ：只有nfa匹配，就是传统nfa
DFA不支持捕获型括号和回溯


** 结构
^ $ ：匹配位置
元字符序列：\< \>  文本界限

[]：字符组  [1-6] "-"表示一个范围
[^]：排除型字符

元字符： 
    . 匹配任意字符
    ？可选项 允许出现这个字符，但它的出现并非匹配成功的标志
    * 任意次数，包括0次
    + 至少出现一次
    {3，5} 区间
    \ 消除元字符的特殊意义
    

多选结构： |   ()

()用途： 限制多选项的范围；将若干字符组成一个单元

一个字符组只能匹配目标文件中的单个字符，每个多选结构自身都可能是完整的正则表达式
字符组基本可以算作一门独立的微型语言，多选结构是“正则表达式语言主体”的一部分
对检索文本的了解，以及需要达到的准确程度，两者之间取得平衡

小技巧：
忽略大小写

